// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using NetworkCommsDotNet;
using System.Linq;
using System.Net;
using System.Collections.Generic;
using System.Drawing;
using DPSBase;
using System.IO;

namespace ExamplesChat.iOS
{
	public partial class ChatWindow : UIViewController
    {
        #region Private Fields
        /// <summary>
        /// Size of the chat history view when the keyboard is hidden
        /// </summary>
        RectangleF originalViewSize = new RectangleF(0,0, 320,416);
        
        /// <summary>
        /// Static reference to the chatHistory text view.
        /// </summary>
        static UITextView chatHistoryBox;

        /// <summary>
        /// Boolean for tracking the first initialisation
        /// </summary>
        static bool firstInitialisation = true;

        /// <summary>
        /// Dictionary to keep track of which peer messages have already been written to the chat window
        /// </summary>
        static Dictionary<ShortGuid, ChatMessage> lastPeerMessageDict = new Dictionary<ShortGuid, ChatMessage>();

        /// <summary>
        /// The maximum number of times a chat message will be relayed
        /// </summary>
        static int relayMaximum = 3;

        /// <summary>
        /// A local counter used to track the number of messages sent from
        /// this instance.
        /// </summary>
        static long messageSendIndex = 0;

        /// <summary>
        /// Static object used for thread safety
        /// </summary>
        static object locker = new object();
        #endregion

        public ChatWindow (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            //Subscribe to the keyboard events
            NSNotificationCenter.DefaultCenter.AddObserver(UIKeyboard.DidHideNotification, HandleKeyboardDidHide);
            NSNotificationCenter.DefaultCenter.AddObserver(UIKeyboard.DidShowNotification, HandleKeyboardDidShow);

            //Remove the keyboard if the screen is tapped
            var tap = new UITapGestureRecognizer();
            tap.AddTarget(() =>
            {
                this.View.EndEditing(true);
            });
            this.View.AddGestureRecognizer(tap);

            //Set the static reference
            chatHistoryBox = ChatHistory;

            //Uncomment this line to enable logging
            //EnableLogging();

            //Initialise NetworkComms.Net using TCP as the default
            InitialiseComms(ConnectionType.TCP);
        }

        /// <summary>
        /// Enable NetworkComms.Net logging
        /// </summary>
        private void EnableLogging()
        {
            var localDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            var commsDir = Path.Combine(localDirectory, "NetworkComms");

            if (!Directory.Exists(commsDir))
                Directory.CreateDirectory(commsDir);

            var logFileName = Path.Combine(commsDir, "log.txt");
            AppendLineToChatBox("Logging enabled to " + logFileName);

            NetworkComms.EnableLogging(logFileName);
        }

        /// <summary>
        /// Append a line of text to the chathistory text view
        /// </summary>
        /// <param name="text"></param>
        public static void AppendLineToChatBox(string text)
        {
            chatHistoryBox.InvokeOnMainThread(new NSAction(() =>
            {
                lock (locker)
                {
                    chatHistoryBox.Text += text + Environment.NewLine;
                    PointF bottomOffset = new PointF(0, chatHistoryBox.ContentSize.Height - chatHistoryBox.Bounds.Size.Height);
                    chatHistoryBox.SetContentOffset(bottomOffset, true);
                }
            }));
        }

        #region Event Handlers
        /// <summary>
        /// Implements the remainder of SendButtonClick and causes the provided message to be sent
        /// </summary>
        /// <param name="sender"></param>
        partial void SendButtonClick(NSObject sender)
        {
            SendMessage();
        }

        /// <summary>
        /// Resize the view to take into account the keyboard position
        /// </summary>
        /// <param name="notification"></param>
        void HandleKeyboardDidShow(NSNotification notification)
        {
            MessageBox.Text = "";

            NSObject value = notification.UserInfo[UIKeyboard.FrameEndUserInfoKey];
            RectangleF keyboardFrame = ((NSValue)value).RectangleFValue;

            ChatView.Frame = new System.Drawing.RectangleF(ChatView.Frame.X, ChatView.Frame.Y, ChatView.Frame.Width, ChatView.Frame.Height - keyboardFrame.Height);
            PointF bottomOffset = new PointF(0, ChatHistory.ContentSize.Height - ChatHistory.Bounds.Size.Height);
            ChatHistory.SetContentOffset(bottomOffset, true);
        }

        /// <summary>
        /// Resize the view once the keyboard has been minimised
        /// </summary>
        /// <param name="notification"></param>
        void HandleKeyboardDidHide(NSNotification notification)
        {
            //Set back to original size
            ChatView.Frame = originalViewSize;
        }
        #endregion

        #region NetworkComms.Net Methods
        /// <summary>
        /// Initialises NetworkComms.Net
        /// </summary>
        /// <param name="connectionType"></param>
        public static void InitialiseComms(ConnectionType connectionType)
        {
            //Start by printing some usage instructions
            AppendLineToChatBox("");
            AppendLineToChatBox("iOS chat usage instructions:");
            AppendLineToChatBox("");
            AppendLineToChatBox("Step 1. Open atleast two chat applications. One of them could be the native windows or windows phone 8 chat example.");
            AppendLineToChatBox("Step 2. Decide which application will be the 'master', aka server.");
            AppendLineToChatBox("Step 3. Enter the masters IP address and port number into the other applications settings.");
            AppendLineToChatBox("Step 4. Start chatting. Don't forget to checkout UDP connection methods.");
            AppendLineToChatBox("");
            AppendLineToChatBox("Initialising chat ...");

            //We can listen on either TCP or UDP
            if (connectionType == ConnectionType.TCP)
            {
                TCPConnection.StartListening(true);
                AppendLineToChatBox("Listening for incoming TCP connections on:");
                foreach (IPEndPoint endPoint in TCPConnection.ExistingLocalListenEndPoints())
                    AppendLineToChatBox(endPoint.Address + ":" + endPoint.Port);
            }
            else if (connectionType == ConnectionType.UDP)
            {
                UDPConnection.StartListening(true);
                AppendLineToChatBox("Listening for incoming UDP connections on:");
                foreach (IPEndPoint endPoint in UDPConnection.ExistingLocalListenEndPoints())
                    AppendLineToChatBox(endPoint.Address + ":" + endPoint.Port);
            }
            else
                AppendLineToChatBox("Error: Unknown connection type provided.");

            AppendLineToChatBox(Environment.NewLine);

            //Configure the incoming packet handlers
            //We only ever need to do this once
            if (firstInitialisation)
            {
                firstInitialisation = false;

                //Configure NetworkCommsDotNet to handle and incoming packet of type 'ChatMessage'
                //e.g. If we recieve a packet of type 'ChatMessage' execute the method 'HandleIncomingChatMessage'
                NetworkComms.AppendGlobalIncomingPacketHandler<ChatMessage>("ChatMessage", HandleIncomingChatMessage);

                //Configure NetworkCommsDotNet to perform an action when a connection is closed
                //e.g. When a connection is closed execute the method 'HandleConnectionClosed'
                NetworkComms.AppendGlobalConnectionCloseHandler(HandleConnectionClosed);
            }
        }

        /// <summary>
        /// Performs whatever functions we might so desire when we recieve an incoming ChatMessage
        /// </summary>
        /// <param name="header">The PacketHeader corresponding with the recieved object</param>
        /// <param name="connection">The Connection from which this object was recieved</param>
        /// <param name="incomingMessage">The incoming ChatMessage we are after</param>
        private static void HandleIncomingChatMessage(PacketHeader header, Connection connection, ChatMessage incomingMessage)
        {
            //We only want to write a message once to the chat window
            //Because we allow relaying and may recieve the same message twice 
            //we use our history and message indexes to ensure we have a new message
            lock (lastPeerMessageDict)
            {
                if (lastPeerMessageDict.ContainsKey(incomingMessage.SourceIdentifier))
                {
                    if (lastPeerMessageDict[incomingMessage.SourceIdentifier].MessageIndex < incomingMessage.MessageIndex)
                    {
                        //If this message index is greater than the last seen from this source we can safely
                        //write the message to the ChatBox
                        AppendLineToChatBox(incomingMessage.SourceName + " - " + incomingMessage.Message);

                        //We now replace the last recieved message with the current one
                        lastPeerMessageDict[incomingMessage.SourceIdentifier] = incomingMessage;
                    }
                }
                else
                {
                    //If we have never had a message from this source before then it has to be new
                    //by defintion
                    lastPeerMessageDict.Add(incomingMessage.SourceIdentifier, incomingMessage);
                    AppendLineToChatBox(incomingMessage.SourceName + " - " + incomingMessage.Message);
                }
            }

            //This last section of the method is the relay function
            //We start by checking to see if this message has already been relayed
            //the maximum number of times
            if (incomingMessage.RelayCount < relayMaximum)
            {
                //If we are going to relay this message we need an array of 
                //all other known connections
                var allRelayConnections = (from current in NetworkComms.GetExistingConnection() where current != connection select current).ToArray();

                //We increment the relay count before we send
                incomingMessage.IncrementRelayCount();

                //We will now send the message to every other connection
                foreach (var relayConnection in allRelayConnections)
                {
                    //We ensure we perform the send within a try catch
                    //To ensure a single failed send will not prevent the
                    //relay to all working connections.
                    try { relayConnection.SendObject("ChatMessage", incomingMessage); }
                    catch (CommsException) { /* Catch the comms exception, ignore and continue */ }
                }
            }
        }

        /// <summary>
        /// Performs whatever functions we might so desire when an existing connection is closed.
        /// </summary>
        /// <param name="connection">The closed connection</param>
        private static void HandleConnectionClosed(Connection connection)
        {
            //We are going to write a message to the ChatBox when a user disconnects
            //We perform the following within a lock so that threads proceed one at a time
            lock (lastPeerMessageDict)
            {
                //Extract the remoteIdentifier from the closed connection
                ShortGuid remoteIdentifier = connection.ConnectionInfo.NetworkIdentifier;

                //If at some point we recieved a message with this identifier we can
                //include the sourcename in the dissconnection message.
                if (lastPeerMessageDict.ContainsKey(remoteIdentifier))
                    AppendLineToChatBox("Connection with '" + lastPeerMessageDict[remoteIdentifier].SourceName + "' has been closed.");
                else
                    AppendLineToChatBox("Connection with '" + connection.ToString() + "' has been closed.");

                //Last thing is to remove this entry from our message history
                lastPeerMessageDict.Remove(connection.ConnectionInfo.NetworkIdentifier);
            }
        }

        /// <summary>
        /// Send a message.
        /// </summary>
        private void SendMessage()
        {
            //If we have tried to send a zero length string we just return
            if (MessageBox.Text.Trim() == "") return;

            //We may or may not have entered some master connection information
            ConnectionInfo masterConnectionInfo = null;
            if (Settings.MasterIPValue != "")
            {
                try { masterConnectionInfo = new ConnectionInfo(Settings.MasterIPValue.Trim(), Settings.MasterPortValue); }
                catch (Exception)
                {
                    AppendLineToChatBox("Error: Failed to parse the master IP and port. Please ensure it is correct and try again");
                    return;
                }
            }

            //We wrap everything we want to send in the ChatMessage class we created
            ChatMessage messageToSend = new ChatMessage(NetworkComms.NetworkIdentifier, Settings.LocalNameValue, MessageBox.Text, messageSendIndex++);

            //We add our own message to the message history incase it gets relayed back to us
            lock (lastPeerMessageDict) lastPeerMessageDict[NetworkComms.NetworkIdentifier] = messageToSend;

            //We write our own message to the chatBox
            AppendLineToChatBox(messageToSend.SourceName + " - " + messageToSend.Message);

            //We clear the text within the messageText box.
            MessageBox.Text = "";

            //If we provided master information we send to the master first
            if (masterConnectionInfo != null)
            {
                //We perform the send within a try catch to ensure the application continues to run if there is a problem.
                try
                {
                    if (Settings.ConnectionTypeValue == ConnectionType.TCP)
                        TCPConnection.GetConnection(masterConnectionInfo).SendObject("ChatMessage", messageToSend);
                    else if (Settings.ConnectionTypeValue == ConnectionType.UDP)
                        UDPConnection.GetConnection(masterConnectionInfo, UDPOptions.None).SendObject("ChatMessage", messageToSend);
                    else
                        throw new Exception("An invalid connectionType is set.");
                }
                catch (CommsException) { AppendLineToChatBox("Error: A CommsException occured while trying to send message to " + masterConnectionInfo); }
            }

            //If we have any other connections we now send the message to those as well
            //This ensures that if we are the master everyone who is connected to us gets our message
            var otherConnectionInfos = (from current in NetworkComms.AllConnectionInfo() where current != masterConnectionInfo select current).ToArray();
            foreach (ConnectionInfo info in otherConnectionInfos)
            {
                //We perform the send within a try catch to ensure the application continues to run if there is a problem.
                try
                {
                    if (Settings.ConnectionTypeValue == ConnectionType.TCP)
                        TCPConnection.GetConnection(info).SendObject("ChatMessage", messageToSend);
                    else if (Settings.ConnectionTypeValue == ConnectionType.UDP)
                        UDPConnection.GetConnection(info, UDPOptions.None).SendObject("ChatMessage", messageToSend);
                    else
                        throw new Exception("An invalid connectionType is set.");
                }
                catch (CommsException) { AppendLineToChatBox("A CommsException occured while trying to send message to " + info); }
            }
        }
        #endregion
    }
}
